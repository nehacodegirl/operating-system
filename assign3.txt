						Assignment-3


Read the following to understand the parent & child process concept.

•	Process state Diagram
=>	States of a process are as following:
		New (Create) – In this step, the process is about to be created but not yet created, it is the program which is present in 				secondary memory that will be picked up by OS to create the process.
		
		Ready – New -> Ready to run. After the creation of a process, the process enters the ready state i.e. the process is loaded into 				the main memory. The process here is ready to run and is waiting to get the CPU time for its execution.
		
		Run – The process is chosen by CPU for execution and the instructions within the process are executed by any one of the 			available CPU cores.

		Blocked or wait – Whenever the process requests access to I/O or needs input from the user or needs access to a critical 			region(the lock for which is already acquired) it enters the blocked or wait state. Once the I/O operation is 			completed the process goes to the ready state.

		Terminated or completed – Process is killed as well as PCB is deleted.

		Suspend ready – Process that was initially in the ready state but were swapped out of main memory(refer Virtual Memory  				topic) and placed onto external storage by scheduler are said to be in suspend ready state.

		Suspend wait or suspend blocked – Similar to suspend ready but uses the process which was performing I/O operation and lack 				of main memory caused them to move to secondary memory.

===============================================================================================================================
		
•	The parent & child process concept
		Parent Process : All the processes in operating system are created when a process executes the fork() system call except the 				startup process. The process that used the fork() system call is the parent process.
		Child Process : A child process is a process created by a parent process in operating system using a fork() system call. A child 				process may also be called a subprocess or a subtask.
		=>Fork system call is used for creating a new process, which is called child process, which runs concurrently with the process 			that makes the fork() call (parent process). After a new child process is created, both processes will execute the next 		instruction following the fork() system call. A child process uses the same pc(program counter), same CPU registers, same open 		files which use in the parent process.

===============================================================================================================================

•	Understand orphan processes
		A process whose parent process no more exists i.e. either finished or terminated without waiting for its child process to 				terminate is called an orphan process. In the following code, parent finishes execution and exits while the child process is still 		executing and is called an orphan process now.

===============================================================================================================================		
•	Understand zombie processes
		A process which has finished the execution but still has entry in the process table to report to its parent process is known as a 		zombie process. A child process always first becomes a zombie before being removed from the process table. The parent 		process reads the exit status of the child process which reaps off the child process entry from the process table
		
===============================================================================================================================

•	what is getpid() and how to use it..??
		
•	what is getppid() and how to use it..??
•	what is fork()? what happens when you use fork() in your program..??
•	what is wait() / waitpid() and how to use it..??
•	what are zombie processes? when they will get created.? How to kill the zombie processes..?
•	what are orphan processes? when they will get created.?
•	what is user space?
•	what is kernel space / system space? 
•	What is IPC(inter process communication) and what is the need of it.
•	what is Unnamed PIPE? how to create it? When we need this??
•	what is named PIPE? how to create it? When we need this??
•	What is the difference between Unnamed PIPE and named PIPE?
•	what are execl,exec,execv and difference between them..?? 
•	what is semaphore? Explore sem_init(), sem_create(), sem_destroy(), sem_unlink(), sem_wait(), sem_post().
•	what is mutex? Difference between semaphore and mutex.


====================================================================================================================================



Q4 	Scheduling algorithm 
Write a program in C/CPP to take process name, its arrival time and execution/burst time as input. 
	Use FCFS(non-preemptive) algorithm to calculate wait time of each process, average 
wait time, turnaround time of each process and average turnaround time. 
	Calculation of time will start from the arrival time of first process.
execution/burst time - Time required for execution of process
	Wait time of process = response time of process - arrival time process
	Response time of process : time at which process is scheduled to run
	Average wait time = (sum of wait time of each process) / (number of processes) 
	Turnaround time of process = (finish/completion time of process) - (arrival time of process)
	Average turnaround time = (sum of turnaround time of each process) / (number of processes) 
 */

#include <iostream>
#include <string>
#include <cstring>
#include <queue>
#include <ctime>

using namespace std;

struct pstruct
{
    string process;
    double arrival_time;
    double execution_time;
};
queue<pstruct> sch_queue;
void FCFS()
{
    double currentime = 0;
    double comp_time = 0;

    double compeletion_time[100];
    double turn_around_time[100];
    double waiting_time[100];
    int i = 0;
    while (!sch_queue.empty())
    {
        struct pstruct q1 = sch_queue.front();
        if (currentime < q1.arrival_time)
        {

            currentime = q1.arrival_time;
        }

        double comp_time = currentime + q1.execution_time;
        currentime = comp_time;

        compeletion_time[i] = comp_time;
        turn_around_time[i] = comp_time - q1.arrival_time;
        waiting_time[i] = turn_around_time[i] - q1.execution_time;

        sch_queue.pop();
        i++;
    }

    double sumturn = 0;
    double sumwait = 0;
    for (int j = 0; j < i; j++)
    {

        sumturn = sumturn + turn_around_time[j];
        sumwait = sumwait + waiting_time[j];
    }

    double avg_turnaround = sumturn / i;
    double avg_waiting_time = sumwait / i;
    cout << "avg turn around time is : " << avg_turnaround << " avg waiting time is:  " << avg_waiting_time << endl;
}

int main()
{

    while (1)
    {
        struct pstruct p;
        string process;
        cout << "enter process name" << endl;
        cin >> process;
        if (process == "end")
            break;
        p.process = process;
        double arrival_time;
        cout << "enter arrival time name" << endl;
        cin >> arrival_time;
        p.arrival_time = arrival_time;
        double execution_time;
        cout << "enter burst time /execution time" << endl;
        cin >> execution_time;
        p.execution_time = execution_time;
        sch_queue.push(p);
    }

    FCFS();

    return 0;
}
